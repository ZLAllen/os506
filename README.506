This README containes all the functionalities tha we have added to our shell with brief explanation.

##############################################################################
Issues with the code

-- Fork is not working in user space since we are not able to locate child's stack pointer.This makes complete testing of the OS problematic.
    -- Fork should be working in kernel space.

##############################################################################

Memory management: pmap.c
-- Divides the entire physical memory into contiguous 4kb pages
-- Linked together via one linked list with the head being the next free page
    -- Get next free page 
-- Initialized from sys/main.c via pmap_init
-- Restore linked list of physical page struct inside kernel and return the new physfree to sys/main

######################

Paging - pging.c
-- Initialized from sys/main.c via init_pging
-- Allocate new physical page as pml4
-- Map kernel from KERNBASE + physbase to physfree
-- Map video memory starting from 0xFFFFFFFF800B8000UL
-- Load to cr3 register to enable paging
-- Page table levels accessed via self-referential technique

######################

Schedule - schedule.c
-- schedule new tasks via an available_tasks linked list, round robin technique
-- separate lists for waiting and sleeping tasks
-- upon yield, an newly awoken task is searched for, followed by a task done waiting, and finally runnable available tasks  
    -- idle task runs if no runnable task is available
-- switch_to handles switching to user mode
    -- push user stack segment, code segment to stack
    -- call iretq to return to user mode
-- fork process by creating a copy of the current process and setting the copy-on-write bit of the parent's page table entries




##############################################################################
ELF Binary Loader- elf64.c and tarfs.c
-- Create abstract file objects for the USTAR FS
-- Maps the text, data, bss, heap, and stack into memory
-- Creates tasks and schedules it for running 




##############################################################################
SYSCALLS implemented with signature

int64_t sys_yield()
int64_t sys_sleep(uint64_t msec)
int64_t sys_wait4(int pid, uint64_t status, int options)
int64_t sys_fork(uint64_t parent_rip)
int64_t sys_exit()
int64_t sys_ps(char *buf)
int64_t sys_open(char *name, int flags)
int64_t sys_close(int fd)
int64_t sys_brk(void *addr)
int64_t getcwd(char* buf)
int64_t sys_getdents(unsigned int fd, struct linux_dirent *dirp, unsigned int count)
int64_t sys_read(unsigned int fd, char *buf, size_t count)
int64_t sys_write(unsigned int fd, char *buf, size_t count)
int64_t sys_pipe(int *pipefd)
int64_t sys_execvpe(char *file, char **argv, char **envp)
int64_t sys_chdir(char *path)


Syscall library functions
ssize_t read(unsigned int fd, char *buf, size_t size);
ssize_t write(unsigned int fd, const char *buf, size_t size);
int open(const char *file, int flag);
int close(unsigned int fd);
int chdir(const char *path);
int pipe(int pipefd[]);
int dup2(int srcfd, int destfd);
int execvpe(char *path, char *argv[], char *envp[]);
void *brk(void *addr);
pid_t wait(int *status);
pid_t waitpid(pid_t pid, int *status);
char *getcwd(char *buf, size_t size);
void yield();
void sleep(uint64_t ms);
pid_t fork();
void exit();

##############################################################################

Shell: sbush.c

-- shell welcome message, greeting
-- cd to change directory (must followed by directory)
-- ls to list files and directories, takes a file name, a directory name, or ls current directory if no argument
-- pipe 
-- background process with & trailling 
-- export to set the environment variable. mainly HOME, USER, PATH, and PS1. 
-- cat to read a file and output to standard library
-- grep word (no quotation mark)[files...] 
-- shell exit message, simple message for graceful exit
-- execute script, a testscript example is provided


##############################################################################
Standard Library: .c files under libc

-- string library functionalities in string.c
-- execvpe, a wrapper arround execve to allow passing of filename rather than a binary name
-- syscalls.c contains all syscalls implementations, declarations in unistd.h/stdlib.h/syscalls.h
syscall number are defined in sysdefs.h
-- env.c contains environment global environ and setenv/getenv functions
-- memory.c contains malloc and free functions 
-- stdio.c contains a simple printf function
-- wait.c contains a wrapper for syscall wait4()


Complement to include folder:
fcntl.c defines a linux_direct struct and some open system call flags


##############################################################################
Note:
Contributing source: this project incoporates knowledge that we learn online, including

1) https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html (inline assembly guide)
2) linux error code table
3) linux x86_64 system call table
4) Danluu's tutorial to malloc 
5) MIT's tutorial on xv6 shell (the cmd structure in this project was influnced by the tutorial)
6) http://www.cprogramming.com/tutorial/c/lesson17.html


How to run the code?

You can run it as suggested in the course README file. 
